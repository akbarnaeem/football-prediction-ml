# -*- coding: utf-8 -*-
"""football_mL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LCXH4Oa709557d10J3GzX-aAHIfoGjjI

# **Your Match, Your Score**

Importing Libraries:
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

"""Loading Data:"""

data = pd.read_csv('/all_games.csv')

"""Displaying the first few rows of the dataset:"""

print(data.head())

"""Encoding the Full Time Result (FTR):"""

data['FTR'] = data['FTR'].map({'H': 1, 'D': 0, 'A': -1})

"""Checking for missing values:"""

print(data.isnull().sum())

"""Creating features for home team strength and away team defense:"""

data['HomeTeamStrength'] = data.groupby('HomeTeam')['FTHG'].transform('mean')
data['AwayTeamDefense'] = data.groupby('AwayTeam')['FTAG'].transform('mean')

"""Selecting relevant features:"""

features = ['HomeTeamStrength', 'AwayTeamDefense', 'FTHG', 'FTAG', 'HS', 'AS']
X = data[features]
y = data['FTR']

"""Splitting the Data:"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Building ML Model:"""

model = RandomForestClassifier()
model.fit(X_train, y_train)

"""Evaluating the Model:"""

predictions = model.predict(X_test)
accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", accuracy * 100, "%")

"""Confusion Matrix:"""

conf_matrix = confusion_matrix(y_test, predictions)
print("Confusion Matrix:\n", conf_matrix)

"""Predicting Future Matches:"""

conf_matrix = confusion_matrix(y_test, predictions)
print("Confusion Matrix:\n", conf_matrix)

import matplotlib.pyplot as plt

print("Displaying Confusion Matrix:")
disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=model.classes_)
disp.plot()
plt.title('Confusion Matrix')
plt.show()
print("-" * 30)

print("Predicting a new match:")

new_match = pd.DataFrame({
    'HomeTeamStrength': [1.5],
    'AwayTeamDefense': [1.0],
    'FTHG': [0],
    'FTAG': [0],
    'HS': [0],
    'AS': [0]
})
prediction = model.predict(new_match)
print("Predicted Result:", prediction)
print("-" * 30)

"""# **Custom Prediction for teams**

Getting unique teams from both columns:
"""

home_teams = data['HomeTeam'].unique()
away_teams = data['AwayTeam'].unique()

"""Combining and getting all unique team names:"""

all_teams = set(home_teams) | set(away_teams)
all_teams = sorted(all_teams)

"""Displaying the team names:"""

print("All Teams:", all_teams)

"""Preparing team stats:"""

home_stats = data.groupby('HomeTeam').agg({
    'FTHG': 'mean',
    'HS': 'mean',

}).rename(columns={
    'FTHG': 'AvgHomeGoals',
    'HS': 'AvgHomeShots'
})

away_stats = data.groupby('AwayTeam').agg({
    'FTAG': 'mean',
    'AS': 'mean',

}).rename(columns={
    'FTAG': 'AvgAwayGoals',
    'AS': 'AvgAwayShots'
})

team_stats = pd.merge(home_stats, away_stats, left_index=True, right_index=True, how='outer')
team_stats.fillna(0, inplace=True)

"""Printing availabe teams:"""

print("\nAvailable Teams:")
for team in sorted(team_stats.index):
    print("‚Ä¢", team)

"""Taking user input teams:"""

home_team = input("\nEnter Home Team: ")
away_team = input("Enter Away Team: ")

"""Checking if both teams are valid and predicting the results given in input:"""

if home_team not in team_stats.index or away_team not in team_stats.index:
    print("‚ùå One or both team names are incorrect.")
else:
    print("‚úÖ Both teams are valid.")
    new_match = pd.DataFrame({
        'HomeTeamStrength': [team_stats.loc[home_team, 'AvgHomeGoals']],
        'AwayTeamDefense': [team_stats.loc[away_team, 'AvgAwayGoals']],
        'FTHG': [0],
        'FTAG': [0],
        'HS': [team_stats.loc[home_team, 'AvgHomeShots']],
        'AS': [team_stats.loc[away_team, 'AvgAwayShots']],
    })
    prediction = model.predict(new_match)
    label = prediction[0]

    if label == 0:
        result = f"üè† {home_team} wins (Home Win)"
    elif label == 1:
        result = "‚öñÔ∏è Draw"
    else:
        result = f"‚úàÔ∏è {away_team} wins Away Win"

    print(f"\nüìä Prediction: {home_team} vs {away_team} ‚Üí {result}")